// <auto-generated />
using System;
using DentalClinic.DB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DentalClinic.DB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221117200136_add_ForeignKeyDoctorToUser")]
    partial class add_ForeignKeyDoctorToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DentalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<string>("Who")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("DentalServices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("935d4813-1b12-4851-9e96-d38bc6fb6485"),
                            ServiceDescription = "",
                            ServiceName = "Surgical operations",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2002),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("838c61b9-34e3-4144-8a4e-267e43a129af"),
                            ServiceDescription = "",
                            ServiceName = "Dental implants",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2009),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("d1a71a51-115e-45ff-920d-4bdcbace3808"),
                            ServiceDescription = "",
                            ServiceName = "Complete changeover",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2012),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("904abf19-2c82-4219-8efa-dc2f7187ca2a"),
                            ServiceDescription = "",
                            ServiceName = "Aesthetic fillings",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2015),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("7332e0f4-ddf3-4503-9adc-19f9c68069fe"),
                            ServiceDescription = "",
                            ServiceName = "Veneers",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2029),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("be40ed1a-1df9-4a81-b18a-c31575386aa4"),
                            ServiceDescription = "",
                            ServiceName = "Ceramic inlays",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2033),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("d7defb1a-61a4-4778-bd59-efd8c29b7480"),
                            ServiceDescription = "",
                            ServiceName = "Crowns and bridges",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2035),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("a9c1c0c9-8829-4ee4-96cd-c00aafff8c15"),
                            ServiceDescription = "",
                            ServiceName = "Tooth extraction",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2039),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("d499a064-7b5d-4545-acd3-124931b49467"),
                            ServiceDescription = "",
                            ServiceName = "Prosthesis",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2041),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("c32463e5-baa8-41c7-9845-57cf64b2ac43"),
                            ServiceDescription = "",
                            ServiceName = "Orthodontic treatment/braces and splints",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2045),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("eddcbac0-1294-4697-a3b9-f6e96e016d46"),
                            ServiceDescription = "",
                            ServiceName = "Teeth whitening",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2047),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("c47cf11f-2e5d-4c01-be9f-825540632bdc"),
                            ServiceDescription = "",
                            ServiceName = "Glass supports",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(2050),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        });
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<string>("MoreInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<string>("Who")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Who");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c4a6ec7-afec-46b9-8d93-06642c86afb9"),
                            IsActive = (byte)1,
                            MoreInfo = "Doctor Radeva has 5 years of experience as a dentist.",
                            Name = "Dr. Radeva",
                            Qualification = "Dentist",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(1877),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("a83e5005-97e8-4250-97ff-d4682f269f86"),
                            IsActive = (byte)1,
                            MoreInfo = "Doctor Valeva has 3 years of experience as a оrthodontist.",
                            Name = "Dr. Valeva",
                            Qualification = "Оrthodontist",
                            When = new DateTime(2022, 11, 17, 22, 1, 36, 362, DateTimeKind.Local).AddTicks(1916),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        });
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorCustomer", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "CustomerId", "DateTime");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorsCustomers");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorSchedule", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduleDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("bit");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<string>("Who")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DoctorId", "ScheduleDateTime");

                    b.HasIndex("Who");

                    b.ToTable("DoctorsSchedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DentalService", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.Doctor", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.User", null)
                        .WithMany("Doctors")
                        .HasForeignKey("UserId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Who")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorCustomer", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.Doctor", "Doctors")
                        .WithMany("DoctorCustomers")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorCustomers_Doctors");

                    b.HasOne("DentalClinic.DB.Data.Models.User", null)
                        .WithMany("DoctorCustomers")
                        .HasForeignKey("UserId");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorSchedule", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.Doctor", "Doctors")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorSchedules_Doctors");

                    b.HasOne("DentalClinic.DB.Data.Models.User", "Users")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("Who")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorSchedules_Users");

                    b.Navigation("Doctors");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorCustomers");

                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.User", b =>
                {
                    b.Navigation("DoctorCustomers");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
